OOP: this is called object-oriented programming.

The two main things in Python are:
   1) class
   2) object

Class: class is a blueprint for creating object.
      Eg: #Creating a Class
            class Student:
                name = "Karan Kumar"

          #Creating object (instance)
            s1 = Student()
            print(s1.name)

Object: Object can be defined as a data field that has unique attributes and behavior. 
      Eg:  #Creating object (instance)
            s1 = Student()
            print(s1.name)

__init__: __init__ function is a constructor.
all classes have a function called __init__(), which is always executed when the object is being initiated.

           Eg: class student:
                  def__init__(self,name):
                    self.name = name 

               s1 = student("adarsh")
               print(s1.name)

The self-parameter is a reference to current instance of a class and is used to access variables that belong to the class.

Class & Instance Attributes:

Class.attr: class attributes are the same for all objects within the same class.

object.attr: object attributes are different for each object within the same class.

Static Methods : methods that don't use the self parameter(work at class level) and it is a decorator
         Eg: class student:
              @static method   #Decorator
              def collage():
                print("ABC college")
 Abstraction: 
   Hiding the implementation details of a class and only showing the essential features to the user.

Encapsulation:
   wrapping data and functions into a single unit (object).














         
