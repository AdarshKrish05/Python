
Numpy is a fundamental package in Python. it provides support for multi-dimensional arrays and matrices.

Key features of NumPy are:
   1) N-dimensional arrays
   2) Efficient Operations
   3) Broadcasting
   4) indexing and slicing
 
importing NumPy:
 import numpy as np

NumPy Arrays:

np.arange():
   np.arange() is a function in NumPy used to create an array within a specified range. 
      Its syntax is:
         numpy.arange([start, ]stop, [step, ]dtype=None)

To Create a NumPy array:
    arr = np.arange(10)
    print(arr)
    #output: [0,1,2,3,4,5,6,7,8,9]

1D Arrays:

1D arrays are like traditional arrays or lists. They have a single row and can be indexed using a single index.

   # Create a 1D array
      arr_1d = np.array([1, 2, 3, 4, 5])
      print(arr_1d)       # Output: [1 2 3 4 5]
      print(arr_1d[0])    # Output: 1

2D Arrays:

2D arrays, also known as matrices, have rows and columns. They are indexed using two indices, one for the row and one for the column.

 # Create a 2D array
   arr_2d = np.array([[1, 2, 3],
                      [4, 5, 6],
                      [7, 8, 9]])
   print(arr_2d)   



Properties of NumPy Arrays:

1. Shape:
     The shape of an ndarray describes the size of each dimension of the array. 
     It is represented as a tuple of integers indicating the number of elements along each dimension.

 # Create a 2D array
    arr_2d = np.array([[1, 2, 3], [4, 5, 6]])

 # Print the shape
    print("Shape of the array:", arr_2d.shape)  # Output: (2, 3)


2. Data Type (dtype):
    The data a type of a ndarray specifies the type of elements stored in the array. 
    NumPy arrays can hold elements of different types such as integers, floats, booleans, etc.

 # Create an array with a specific data type
    arr_float = np.array([1.1, 2.2, 3.3], dtype=np.float32)
 # Print the data type
    print("Data type of the array:", arr_float.dtype)  # Output: float32

3. Size:
    The size of an ndarray is the total number of elements in the array. It is equal to the product of the dimensions of the array.

 # Create a 3D array
    arr_3d = np.zeros((2, 3, 4))
    print(arr_3d)

 # Print the size
    print("Size of the array:", arr_3d.size)  # Output: 24 (2 * 3 * 4)

4. Number of Dimensions (ndim):
    The ndim attribute of an ndarray specifies the number of dimensions or axes of the array.

 # Create a 4D array
    arr_4d = np.ones((2, 3, 4, 5))

 # Print the number of dimensions
    print("Number of dimensions:", arr_4d.ndim)  # Output: 4

5. Itemsize:
    The itemsize attribute of a ndarray specifies the size of each element in bytes.

  # Create an array of integers
    arr_int = np.array([1, 2, 3])
    print(arr_int.dtype)
   
 # Print the item size
    print("Size of each element (in bytes):", arr_int.itemsize)  # Output: 8 (for 64-bit integer)

NumPy Data Types and Precision:

  NumPy Data Types (dtypes):

      NumPy provides a variety of data types to represent different kinds of numerical data. 
      These data types are important for controlling memory usage and ensuring data integrity in numerical computations.

Common NumPy Data Types:

     int: Integer (default size depends on the platform).
     float: Floating point number (default size depends on the platform).
     bool: Boolean (True or False).
     complex: Complex number with real and imaginary parts.
     uint: Unsigned integer (no negative values).

Specifying Data Types:

 You can specify the data type of an ndarray using the "dtype" parameter of NumPy functions or by providing the data type as an argument to the array creation functions.

   # Create an array with a specific data type
      arr_int32 = np.array([1, 2, 3], dtype=np.int32)
      arr_float64 = np.array([1.1, 2.2, 3.3], dtype=np.float64)

      print("Data type of arr_int32:", arr_int32.dtype)   # Output: int32
      print("Data type of arr_float64:", arr_float64.dtype)   # Output: float64

Precision:
    Precision refers to the level of detail and accuracy with which numerical values are represented. 
    NumPy data types have different levels of precision, which determine the range of values they can represent and the amount of memory they occupy

  # Create an array with different data types
    arr_int32 = np.array([1234567890, 1234567890], dtype=np.int32)
    arr_int64 = np.array([1234567890, 1234567890], dtype=np.int64)

    print("Data type of arr_int32:", arr_int32.dtype)   # Output: int32
    print("Data type of arr_int64:", arr_int64.dtype)   # Output: int64

    print(arr_int32)

  # In this example, the `int32` data type has limited precision compared to `int64`, which can represent larger integers without loss of precision.

np.zeros, np.ones, np.full:
  np.zeros creates an array filled with zeros. It takes the shape of the desired array as input and returns an array of that shape filled with zeros.

    Syntax: 
       numpy.zeros(shape, dtype=float)

 shape: The shape of the array (tuple of integers).
 dtype: Optional. The data type of the array. Default is float.

   # Create a 2x3 array filled with zeros
      zeros_array = np.zeros((2, 3))
      print(zeros_array)
np.ones:
  np.ones creates an array filled with ones. Similar to np.zeros, it takes the shape of the desired array as input and returns an array of that shape filled with ones.

     Syntax:
        numpy.ones(shape, dtype=None)

 shape: The shape of the array (tuple of integers).
 dtype: Optional. The data type of the array. If not specified, the default is determined by the data type of 1.

  # Create a 3x2 array filled with ones
     ones_array = np.ones((3, 2))
     print(ones_array)

np.full:
  np.full creates an array filled with a specified constant value. It takes the shape of the desired array and the constant value as input and returns an array of that shape filled with the specified value.

    Syntax:
       numpy.full(shape, fill_value, dtype=None)

shape: The shape of the array (tuple of integers). 
fill_value: The constant value to fill the array with.
dtype: Optional. The data type of the array. If not specified, the default is determined by the data type of fill_value.


Array Operations - NumPy
1. Arithmetic Operations
  # Addition
   arr_sum = np.add([1, 2, 3], [4, 5, 6])
   print("Addition:", arr_sum)  # Output: [5 7 9]

  # Subtraction
   arr_diff = np.subtract([5, 6, 7], [2, 3, 1])
   print("Subtraction:", arr_diff)  # Output: [3 3 6]

  # Multiplication
   arr_prod = np.multiply([2, 3, 4], [3, 4, 5])
   print("Multiplication:", arr_prod)  # Output: [ 6 12 20]

  # Division
   arr_div = np.divide([10, 12, 14], [2, 3, 2])
   print("Division:", arr_div)  # Output: [5. 4. 7.]

  # Modulus
   arr_mod = np.mod([10, 11, 12], [3, 4, 5])
   print("Modulus:", arr_mod)  # Output: [1 3 2]

  # Exponentiation
   arr_pow = np.power([2, 3, 4], [2, 3, 2])
   print("Exponentiation:", arr_pow)  # Output: [ 4 27 16]

2. Relational Operations:
  # Create sample arrays
   arr1 = np.array([1, 2, 3, 4])
   arr2 = np.array([2, 2, 4, 3])

  # Equal
   print("Equal:", arr1 == arr2)  # Output: [False  True False False]

  # Not Equal
   print("Not Equal:", arr1 != arr2)  # Output: [ True False  True  True]

  # Greater Than
   print("Greater Than:", arr1 > arr2)  # Output: [False False False  True]

  # Greater Than or Equal To
   print("Greater Than or Equal To:", arr1 >= arr2)  # Output: [False  True False  True]

  # Less Than
   print("Less Than:", arr1 < arr2)  # Output: [ True False False False]

  # Less Than or Equal To
   print("Less Than or Equal To:", arr1 <= arr2)  # Output: [ True  True  True False]

Indexing and Slicing for 1D Arrays

1. Indexing:
      Indexing refers to accessing individual elements of an array using their position (index) within the array. 
      In NumPy, indexing starts from 0, so the first element has index 0, the second element has index 1, and so on.

    # Create a 1D array
      arr = np.array([1, 2, 3, 4, 5])

    # Access individual elements using indexing
      print("First element:", arr[0])   # Output: 1
      print("Second element:", arr[1])  # Output: 2
      print("Last element:", arr[-1])   # Output: 5 (negative indexing)

2. Slicing:
      Slicing allows you to extract a subset of elements from an array by specifying a range of indices. 
      The basic syntax for slicing is start:stop:step, where start is the starting index (inclusive), stop is the ending index (exclusive), and step is the step size.

     # Create a 1D array
      arr = np.array([1, 2, 3, 4, 5])

     # Slice elements from index 1 to index 3 (exclusive)
      print("Slice:", arr[1:3])  # Output: [2 3]

     # Slice elements from index 0 to index 4 with step size 2
      print("Slice with step:", arr[0:4:2])  # Output: [1 3]

3. Negative Indexing:
      Negative indexing allows you to access elements from the end of the array by specifying negative indices. 
      -1 refers to the last element, -2 refers to the second last element, and so on.

     # Create a 1D array
      arr = np.array([1, 2, 3, 4, 5])

     # Access the last element using negative indexing
      print("Last element:", arr[-1])  # Output: 5

4. Slicing with Omitted Indices:
      You can omit any of the slicing parameters to use default values. 
      Omitting start defaults to 0, omitting stop defaults to the end of the array, and omitting step defaults to 1.

     # Create a 1D array
   arr = np.array([1, 2, 3, 4, 5])

     # Slice elements from the beginning to index 3 (exclusive)
      print("Slice with omitted start:", arr[:3])  # Output: [1 2 3]

     # Slice elements from index 2 to the end
      print("Slice with omitted stop:", arr[2:])  # Output: [3 4 5]

     # Slice elements with step size 2
      print("Slice with omitted step:", arr[::2])  # Output: [1 3 5]

Indexing and Slicing for 2D Arrays:

1. Indexing:
     Indexing refers to accessing individual elements of an array using their position (index) within the array. 
     In a 2D array, indexing is done using row and column indices

     # Create a 2D array
      arr = np.array([[1, 2, 3],
                [4, 5, 6],
                [7, 8, 9]])

     # Access individual elements using indexing
      print("Element at (0, 0):", arr[0, 0])  # Output: 1
      print("Element at (1, 2):", arr[1, 2])  # Output: 6

2. Slicing:
      Slicing allows you to extract a subset of elements from an array by specifying ranges of row and column indices. 
      The basic syntax for slicing is start:stop:step, where start is the starting index (inclusive), stop is the ending index (exclusive), and step is the step size.

     # Create a 2D array
      arr = np.array([[1, 2, 3],
                      [4, 5, 6],
                      [7, 8, 9]])

     # Slice elements from rows 0 to 1 (exclusive) and columns 1 to 2 (exclusive)
      print("Slice:", arr[0:2, 1:3])


     # Modify slice
      arr[0:2, 1:3] = [[10, 20], [30, 40]]
      print("Modified array after slicing:", arr)

3. Negative Indexing:
      Negative indexing can also be used in 2D arrays to access elements from the end of the array.

     # Create a 2D array
      arr = np.array([[1, 2, 3],
                      [4, 5, 6],
                      [7, 8, 9]])
   
     # Access the last element using negative indexing
      print("Last element:", arr[-1, -1])  # Output: 9

4. Slicing with Omitted Indices:
      You can omit any of the slicing parameters to use default values. 
      Omitting start defaults to 0, omitting stop defaults to the end of the array, and omitting step defaults to 1.

     # Create a 2D array
      arr = np.array([[1, 2, 3],
                      [4, 5, 6],
                      [7, 8, 9]])

     # Slice elements from rows 1 to the end and all columns
      print("Slice with omitted start and stop:", arr[1:])

     # Slice elements from all rows and columns 0 to 1 (exclusive) with step size 2
      print("Slice with omitted step:", arr[:, 0:2:2])

Playing With Arrays:

1. Transposing Arrays:
      Transposing an array means exchanging its rows and columns. In NumPy, you can transpose an array using the T attribute or the transpose() function.

     # Create a 2D array
      arr_2d = np.array([[1, 2, 3],
                    [4, 5, 6]])

     # Transpose the array
      transposed_arr = arr_2d.T
      print("Transposed array:")
      print(transposed_arr)

2. Swapping Axes:
      Swapping axes means rearranging the dimensions of an array. You can swap axes using the swapaxes() function.

     # Create a 2D array
      arr_2d = np.array([[1, 2, 3],
                          [4, 5, 6]])

     # Swap axes
      swapped_arr = arr_2d.swapaxes(0,1)
      print("Swapped array:")
      print(swapped_arr)

     # Create a 3D array of shape (2, 3, 4)
     # Think of it as 2 layers of 3x4 matrices
      array_3d = np.array([[[ 1,  2,  3,  4],
                            [ 5,  6,  7,  8],
                            [ 9, 10, 11, 12]],

                           [[13, 14, 15, 16],
                            [17, 18, 19, 20],
                            [21, 22, 23, 24]]])

      print("Original array shape:", array_3d.shape)

     # Swap the first and last axes (depth with columns)
      swapped_array = np.swapaxes(array_3d, 0, 2)

      print("Swapped array shape:", swapped_array.shape)
      print("Swapped array data:\n", swapped_array)

3. Pseudo-random Number Generation:
      NumPy provides various functions for generating pseudo-random numbers. 
      These functions are located in the numpy.random module. 
      You can generate random numbers from different distributions, such as uniform, normal, binomial, etc.

# Pseudo-random Number Generation in 1D Array:

     # Generate 5 random integers between 1 and 10
      random_integers = np.random.randint(1, 10, size=5)
      print("Random integers (1D):", random_integers)

      # Generate 5 random numbers from a normal distribution
      random_normal = np.random.normal(size=5)
      print("Random numbers from normal distribution (1D):", random_normal)


# Pseudo-random Number Generation in 2D Array:

     # Generate a 2D array of shape (3, 3) with random integers between 1 and 10
      random_integers_2d = np.random.randint(1, 10, size=(3, 3))
      print("Random integers (2D):")
      print(random_integers_2d)

     # Generate a 2D array of shape (3, 3) with random numbers from a normal distribution
      random_normal_2d = np.random.normal(size=(3, 3))
      print("Random numbers from normal distribution (2D):")
      print(random_normal_2d)

Operations on 2D Arrays:
1. Matrix Multiplication (np.matmul()):
      Matrix multiplication is a fundamental operation in linear algebra, where you multiply two matrices to obtain a new matrix. 
      You can perform matrix multiplication in NumPy using the np.matmul() function.

     # Define matrices
      matrix_a = np.array([[1, 2], [3, 4]])
      matrix_b = np.array([[5, 6], [7, 8]])

     # Matrix multiplication using np.matmul()
      result = np.matmul(matrix_a, matrix_b)
      print("Matrix Multiplication:")
      print(result)

2. Reshaping (np.reshape()):

      Reshaping an array means changing the shape of the array without changing its data.
      It's useful for converting arrays between different dimensions or rearranging their layout.

   # Reshaping an array
      arr = np.arange(1, 10)  # 1D array from 1 to 9
      print(arr)
      reshaped_arr = arr.reshape((3, 3))  # Reshape to a 3x3 matrix
      print("Reshaped array:")
      print(reshaped_arr)

3. Transpose (np.transpose()):
      Transposing a matrix means flipping its rows with its columns. 
      In NumPy, you can obtain the transpose of a matrix using the np.transpose() function or the .T attribute.

    # Transposing a matrix
      matrix = np.array([[1, 2, 3],
                         [4, 5, 6]])
      transposed_matrix = np.transpose(matrix)
      print("Transposed matrix:")
      print(transposed_matrix)

4. Aggregate Functions:
      Aggregate functions in NumPy are functions that operate on arrays and return a single value, summarizing the data in some way.
      Common aggregate functions include np.sum(), np.max(), np.min(), np.mean(), etc.

     # Aggregate functions
      matrix = np.array([[1, 2, 3],
                         [4, 5, 6]])

      print("Sum of all elements:", np.sum(matrix))  # Output: 21
      print("Maximum element:", np.max(matrix))  # Output: 6
      print("Minimum element:", np.min(matrix))  # Output: 1
      print("Mean of all elements:", np.mean(matrix))  # Output: 3.5

Array Manipulations:
  1. reshape: The reshape method returns a new array with the specified shape, without changing the data.
  2. resize: The resize method changes the shape and size of an array in-place. 
             This method can alter the original array and fill in with repeated copies of a if the new array is larger than the original.
  3. ravel: The ravel method returns a flattened one-dimensional array. It's a convenient way to convert any multi-dimensional array into a flat 1D array.
  4. flatten: Similar to ravel, but flatten returns a copy instead of a view of the original data, thus not affecting the original array.
  5. squeeze: The squeeze method is used to remove axes of length one from an array.
  6. expand_dims: The opposite of squeeze, expand_dims is used to add an axis at a specified position.

Splitting and Joining:
  1. np.split: Splits an array into multiple sub-arrays.
  2. np.array_split: Similar to np.split, but allows for splitting into unequal subarrays.
  3. np.hsplit and np.vsplit: These are specific cases of split for horizontal and vertical splitting respectively, useful for 2D arrays (matrices).
  4. np.concatenate: Concatenates a sequence of arrays along an existing axis
  5. np.hstack and np.vstack: These are specific cases of concatenate for horizontal and vertical stacking respectively.

