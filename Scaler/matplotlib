Matpoltlib is one of the Popular library in Python.
Matplotlib allows for the creation of bar charts, scatter plots, histograms, error charts, power spectra, and much more, with just a few lines of code.

To use Matplotlib, you first need to install it using pip if it's not already installed:
  !pip install matplotlib

After installation, you import Matplotlib, typically its pyplot module, which provides a MATLAB-like interface. 
The standard convention is to import it under the alias plt:
  import matplotlib.pyplot as plt
and we can use Numpy for values

Creating and Plotting a Linear Equation and a Quadratic Equation with NumPy and Matplotlib

A linear equation in two variables (say, x and y) can be represented as y = mx + c, where m is the slope of the line, and c is the y-intercept. 
             Let's plot a simple linear equation using Matplotlib and NumPy.

1. Create an array for x values: Use NumPy to create an array of x values from which y values will be calculated.
      x = np.linspace(start=-10, stop=10, num=400)
2. Define the linear equation: Specify the slope (m) and intercept (c).
      m = 2  # Slope
      c = 3  # Intercept
      y = m * x + c
3. Plot the equation: Use Matplotlib to plot the line.
      plt.plot(x, y, label='y = 2x + 3')
      plt.title('Plot of the Linear Equation')
      plt.xlabel('x')
      plt.ylabel('y')
      plt.xlim(0,10) # Lower Limit, Upper Limit
      plt.ylim(0,20) # Lower Limit, Upper Limit
      plt.grid(True)
      plt.legend()
      plt.savefig('linear-equation.png')
      plt.show()

In this code:

    np.linspace(start, stop, num) generates num evenly spaced samples, calculated over the interval [start, stop].

    plt.plot(x, y, label) plots y versus x as lines and/or markers with an optional label.

    plt.title(), plt.xlabel(), and plt.ylabel() are used to add a title and labels to the axes.

    plt.grid(True) enables a grid to make reading the plot easier.

    plt.savefig() allows you to save the figure in various file formats such as PNG, JPEG, SVG, PDF, and more.

    plt.show() displays the plot.

This will produce a graph of the linear equation y = 2x + 3, showing a straight line that cuts through the y-axis at 3 and has a slope of 2, 
      rising two units in y for every increase of one unit in x

Matplotlib Figure Object
In Matplotlib, the Figure object is a central concept. It acts as the container that holds everything you see on the plot, as well as the space in which elements that make up the plot are drawn. 
         Think of the Figure object as a canvas on which various plots are drawn.

Key Characteristics:

    Container: It holds all plot elements, such as axes, graphics, text, and labels.

    Independence: You can create multiple figures. Each figure can contain multiple Axes.
  
    Customizable: Its size, DPI (dots per inch), and other attributes can be adjusted according to user needs.

Creating a Figure
When you create a figure in Matplotlib, you're setting up a space where plots will reside. Hereâ€™s how you typically create a figure and add axes to it:

Creating a Matplotlib Figure with Multiple Axes Arranged at Various Positions:

When creating visualizations in Matplotlib, the figure serves as a canvas where multiple plots (axes) can be arranged in various positions. 
  Each set of axes can display different aspects or components of data. 
    For linear functions, these plots might represent different linear equations or variations thereof.

Key Components:

  Figure: The entire window or the canvas for the plots.

  Axes: The individual plots; each set of axes can contain its own elements like lines, labels, ticks, and titles.

Configuring Multiple Axes:

To position axes, use fig.add_axes() with the format [left, bottom, width, height] where each value is a fraction of the figure dimensions:

  left, bottom: These determine the position of the bottom-left corner of the axes.
  width, height: These determine the size of the axes.

Matplotlib Subplots:

Matplotlib subplots allow you to create a grid of subplots within a single figure. 
  This is very useful when you need to display multiple plots in a structured layout to compare them side by side or in a sequence.

1) plt.subplots() function: 

This is the key function to create a figure and a set of subplots. It returns a tuple containing a Figure object and an array of Axes objects.

2) plt.tight_layout() :

The plt.tight_layout() function is used to automatically adjust subplot parameters to give specified padding and avoid overlap between subplots.

Common Parameters:
  figsize: Tuple of width and height in inches to specify the size of the figure.
  dpi: Dots per inch, resolution of the figure.
  sharex, sharey: If set to True, subplots share the x or y axis.
  subplot_kw: Dictionary of keywords passed to the add_subplot() call used to create each subplot.






